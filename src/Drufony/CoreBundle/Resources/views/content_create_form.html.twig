
{# For theming customization #}
{% form_theme form 'DrufonyCoreBundle::forms.html.twig' %}

{% block content %}

{{ form_start(form) }}
{{ form_errors(form) }}

<div class="row row-app">
  <div class="col-md-12 animated fadeInDown">
    <div class="col-separator bg-none box col-separator-first">
      <div class="col-table">
        <div class="col-separator-h"></div>
        <div class="col-table-row">
        <h3 class="innterTB">
        {{ contentType }}
        </h3>
        <div class="widget widget-tabs">
            {% if translationOptions is defined and id is not null %}
                <div class="widget-head">
                    <ul>
                        {% for oneOption in translationOptions %}
                            <li {% if langToTranslate == oneOption.langToTranslate %} class="active" {% endif %}>
                                <a class="glyphicons icon-earth lang-{{ oneOption.langToTranslate }}"
                                    href="{{ path(oneOption.route, {
                                        'lang': lang, 'id': id, 'action': oneOption.action,
                                        'contentType': oneOption.contentType, 'langToTranslate': oneOption.langToTranslate })
                                    }}">
                                <i class="fa fa-fw"></i><span>{{ oneOption.langName | t }}</span></a></li>
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}
            <div class="widget-body innerAll inner-2x">

<div class="row">

                  {# First Column #}
                  {% if columnMiddle is defined %}
                    <div class="col-md-6" style="padding: 0 15px">
                  {% else %}
                    <div class="col-md-9" style="padding: 0 15px">
                  {% endif %}
{# Show string to translate in translate form #}
{% if form.vars.id == 'translateEdit' %}
<div id="edit-original" class="form-item form-type-item">
    <label for="edit-original">{{ "Original text" | t }}</label>
    <p>{{ string }}</p>
</div>
{% endif %}

                  {% for item in form.children %}

                    {# set type of each item #}
                    {% set type = item.vars.block_prefixes[1] %}

                    {# For difference between input and textarea, we get the second value #}
                    {% if item.vars.block_prefixes[2] is defined %}
                      {% set type2 = item.vars.block_prefixes[2] %}
                    {% else %}
                      {% set type2 = 'false' %}
                    {% endif %}

                      {# Print input #}
                      {% if (type == "text" or type == "money" or type == "percent") and type2 != 'textarea' %}
                            {{ form_label(item) }}
                            {{ form_errors(item) }}
                            {{ form_widget(item, { 'attr': { 'class': 'form-control' } }) }}
                            {# macroforms.inputLabel(item.vars.name, form.vars.name, item.vars.required) #}
                      {% endif %}

                      {# Print textarea #}
                      {% if type == 'text' and type2 == 'textarea' %}
                            {{ form_label(item) }}
                            {{ form_errors(item) }}
                            {{ form_widget(item) }}
                      {% endif %}

                      {# Print check #}
                      {% if type == 'checkbox' %}
                        {# macroforms.checkBox(item.vars.name, form.vars.name, '', item.vars.label) #}
                        {{ form_errors(item) }}
                        {{ form_widget(item) }}
                      {% endif %}

                      {# Print check #}
                      {% if type == 'integer' %}
                        {{ form_label(item) }}
                        {{ form_errors(item) }}
                        {{ form_widget(item) }}
                      {% endif %}


                      {# Print choices #}
                      {% if type == 'choice' %}
                      {% set expanded = item.vars.expanded %}
                            {% if expanded != true %}
                              {{ form_label(item) }}
                              {{ form_errors(item) }}
                              {{ form_widget(item) }}
                            {% else %}
                              {% set currentType = '' %}
                              {% if form.varieties.vars.label is defined %}
                                    <span class="strong">{{ form.varieties.vars.label }}</span>
                                    <div class="separator bottom"></div>
                                    {% for key, variety in form.varieties.children %}
                                        {% for type, variet in form.varieties.vars.choices %}
                                            {% if variet[key] is defined and currentType != type %}
                                                <p>{{ type|t }}</p>
                                                {% set currentType = type %}
                                            {% endif %}
                                        {% endfor %}
                                            {{ form_widget(variety) }}
                                    {% endfor %}
                               {% endif %}
                            {% endif %}

                      {% endif %}

                      {# Print add buttons #}
                      {% if type matches '{Form_add*}' %}
                        <div class="widget-body">
                          {{ form_row(attribute(form, item.vars.name)) }}
                        </div>
                      {% endif %}

                      {# Print datePicker #}
                      {% if type == 'datetime' %}
                        {# Enable or disabled future publication date #}
                        {% if item.vars.name == 'futurePublicationDate' %}
                          <div class="wd100">
                            <strong>Not publish this time</strong> <span id="toggleTotal">{{'edit'|t}}</span>
                          </div>
                          <div class="separator bottom"></div>
                          <div id="viewTotal" class="future-publication-date">
                            {{ form_label(item) }}
                            {{ form_errors(item) }}
                            {{ form_widget(item) }}
                          </div>
                        {% else %}
                            {{ form_label(item) }}
                            {{ form_errors(item) }}
                            {{ form_widget(item) }}
                        {% endif %}
                      {% endif %}

                      {# Print Collections #}
                      {% if type == 'collection' %}
                        <div class="form-item collection-type">
                          {# Print hiearchy #}
                          {% if item.vars.name == 'parents' or item.vars.name == 'shippingFees' %}
                            {{ form_row(item, { 'attr': {'class': 'collection-type widget-body'} } ) }}
                          {% endif %}

                                {# Print uploaded images #}
                                {% if item.vars.name == 'images' %}
                                    {% if form.images is not empty %}
                                        {{ form_label(form.images) }}
                                        <div id="{{ form.vars.id }}_images" data-prototype-name="{{
                                        form.images.vars.attr["data-prototype-name"]|e }}" data-prototype="{{ form_widget(form.images.vars.prototype)|e }}">
                                        {% for images in form.images %}
                                            {% if form.images[loop.index0] is defined %}
                                                <div id="{{ form.vars.id }}_images_{{loop.index0}}">
                                                    <div class="file-content"><p>{{ "Image uploaded" | t }}</p><img
                                                    height="100px" src="/{{ form.images[loop.index0].vars.value.uri }}"/></div>
                                                    {{ form_row(form.images[loop.index0].image) }}
                                                    {{ form_row(form.images[loop.index0].link) }}
                                                    {{ form_row(form.images[loop.index0].title) }}
                                                    {{ form_row(form.images[loop.index0].alt) }}
                                                    {{ form_row(form.images[loop.index0].description) }}
                                                    {{ form_row(form.images[loop.index0].iid) }}
                                                    {{ form_row(form.images[loop.index0].uri) }}
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                      </div>
                                    {% endif %}
                                    {{ form_row(item, { 'attr': {'class': 'collection-type widget-body'} } ) }}
                                {% endif %}

                              {% if item.vars.name == 'attachments' %}
                                    {% if form.attachments is not empty %}
                                        {{ form_label(form.attachments) }}
                                        <div id="{{ form.vars.id }}_attachments" data-prototype-name="{{
                                        form.attachments.vars.attr["data-prototype-name"]|e }}" data-prototype="{{ form_widget(form.attachments.vars.prototype)|e }}">
                                        {% for attachment in form.attachments %}
                                            {% if form.attachments[loop.index0] is defined %}
                                                <div id="{{ form.vars.id }}_attachments_{{loop.index0}}">
                                                <div class="file-content"><p>{{ "File uploaded" | t }}</p><a target="_blank" href="/{{ form.attachments[loop.index0].vars.value.uri }}">{{ form.attachments[loop.index0].vars.value.uri }}</a></div>
                                                {{ form_row(form.attachments[loop.index0].file) }}
                                                {{ form_row(form.attachments[loop.index0].title) }}
                                                {{ form_row(form.attachments[loop.index0].description) }}
                                                {{ form_row(form.attachments[loop.index0].fid) }}
                                                {{ form_row(form.attachments[loop.index0].aid) }}
                                                {{ form_row(form.attachments[loop.index0].uri) }}
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                        {{ form_row(item, { 'attr': {'class': 'collection-type widget-body'} } ) }}
                                        </div>
                                    {% else %}
                                        {{ form_row(item, { 'attr': {'class': 'collection-type widget-body'} } ) }}
                                    {% endif %}
                                {% endif %}


                              {% if item.vars.name == 'videos' %}
                                    {% if form.videos is not empty %}
                                        {{ form_label(form.videos) }}
                                        <div id="{{ form.vars.id }}_videos" data-prototype-name="{{
                                        form.videos.vars.attr["data-prototype-name"]|e }}" data-prototype="{{ form_widget(form.videos.vars.prototype)|e }}">
                                        {% for video in form.videos %}
                                            {% if form.videos[loop.index0] is defined %}
                                                <div id="{{ form.vars.id }}_attachments_{{loop.index0}}">
                                                  <div class="file-content"><p>{{ "Video uploaded" | t }}</p>
                                                    <iframe src="//player.vimeo.com/video/{{ form.videos[loop.index0].vars.value.token }}"
                                                    width="220" height="200" frameborder="0"
                                                    webkitallowfullscreen mozallowfullscreen
                                                    allowfullscreen></iframe>
                                                    {{ form_row(form.videos[loop.index0].video) }}
                                                    {{ form_row(form.videos[loop.index0].title) }}
                                                    {{ form_row(form.videos[loop.index0].description) }}
                                                    {{ form_row(form.videos[loop.index0].token) }}
                                                  </div>
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                        </div>
                                    {% endif %}
                                    {{ form_row(item, { 'attr': {'class': 'collection-type widget-body'} } ) }}
                                {% endif %}
                      </div>


                      {% endif %}

                      {% if type != "checkbox" and type != "hidden" %}
                      <div class="separator bottom"></div>
                      {% endif %}

{# SEPARATOR COLUMNS ---------------------------------------------------------------------------------------#}
{# ---------------------------------------------------------------------------------------------------------#}
{# ---------------------------------------------------------------------------------------------------------#}
                      {# Print second column when find last input from first #}
                      {% if columnMiddle is defined and type == columnMiddle[0] and item.vars.name == columnMiddle[1] %}
                      </div>
                      {# Separation column #}
                      {# Middle column #}
                      <div class="col-md-3" style="padding: 0 15px">
                      {% endif %}

                      {# Print third column when find last input from second #}
                      {% if columnRight is not empty and type == columnRight[0] and item.vars.name == columnRight[1] %}
                      </div>
                      {# Separation column #}
                      {# Third column #}
                      <div class="col-md-3" style="padding: 0 15px">
                      {% endif %}
{# END SEPARATOR COLUMNS ------------------------------------------------------------------------------------#}
{# ----------------------------------------------------------------------------------------------------------#}
{# ----------------------------------------------------------------------------------------------------------#}

                      {% if item.vars.name == 'latitude' %}
                        <div class="separator bottom"></div>
                        <div id="address-maps-container">
                          <div id="googleMap" style="height:380px;"></div>
                        </div>
                        <div class="separator bottom"></div>
                      {% endif %}

                      {% if item.vars.name == 'search' %}
                        {{ form_row(form.search) }}
                      {% endif %}

                  {% endfor %}

                <!-- end second column -->
                </div>
<!-- End row -->
</div>
<!-- Row for buttons -->
          <div class="row collection-type align-right">
            <div class="form-item">
                {% if id is defined %}
                       {% if id is not null %}
                          <div class='delete-button'>
                           <a href="{{ path('drufony_content_actions', {
                                       'lang'          : lang,
                                       'id'            : id,
                                       'contentType'   : nodeType,
                                       'action'        : 'delete',
                                       'destination'   : path('drufony_manage_content', {'lang': lang})
                                  }) }}" rel="delete">{{ "Delete" | t }}</a>
                          </div>
                       {% endif %}
                 {% endif %}
                  {% if form.preview is defined %}
                      {{ form_widget(form.preview) }}
                  {% endif %}
                {{ form_widget(form.save) }}
            </div>
          </div>
<!-- End buttons row -->

{{ form_end(form) }}
{% if (categories is defined and vid is not null) %}
    <p> <a href="{{ path('drufony_category_add', {'lang' : lang, 'vid': vid}) }}">Add category</a></p>
    {% for key, category in categories %}
        <p>
            {{category}}
            <a href="{{ path('drufony_category_add', {'lang' : lang, 'vid' : vid, 'tid' : key}) }}">Edit</a>
            <a href="{{ path('drufony_content_actions', {'lang' : lang, 'id' : key,
                                                         'contentType' : 'category',
                                                         'action'      : 'delete'}) }}">Delete</a>
            <a href="{{ path('drufony_category_add', {'lang' : lang, 'vid' : vid, 'parentId' : key, 'tid': key}) }}">Add child</a>
        </p>
    {% endfor %}
{% endif %}

              </div>
          </div>

</div>
        </div>
      </div>
  </div>
  <div id="content-id" class="hidden">
    {% if id is defined %} {{ id }} {% endif %}
  </div>
</div>

<!--FIXME: store google maps api key somewhere else -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAYGf74EcBVM8rXh2vxjJcGoytZCrZn3W0&sensor=true"></script>
<script>
function addElement(event) {
    var collectionHolder = $('#' + $(this).attr('data-target'));
    var prototype = collectionHolder.attr('data-prototype');
    var pattern = collectionHolder.attr('data-prototype-name');
    var form = prototype.replace(new RegExp(pattern, "g"), collectionHolder.children().length);
    collectionHolder.append(form);
    addDeleteLink(collectionHolder.children().last(), $(this));
    event.preventDefault();
}

function addDeleteLink(collectionId, addElement) {
    var removeLink = $('<a href="#" class="delete-link">Delete this element</a>');
    collectionId.append(removeLink);
    removeLink.on('click', function(e) {
        if (collectionId.siblings().length == 0) {
            addElement.click();
        }
        collectionId.remove();
        if (collectionId.find('select[id*="parents"]')) {
            markDisabledParents();
        }
        e.preventDefault();
    });
}

function manageCollection(element) {
    if (element.length) {
        var collectionHolder = $('#' + element.attr('data-target'));
        element.click(addElement);
        if (collectionHolder.children().length == 0) {
            element.click();
        }
        else {
	     collectionHolder.children().each(function() {
                 addDeleteLink($(this), element);
             });
        }
    }
}

function changeHierarchyBehavior(element) {
    element.change(function() {
        markDisabledParents();
    });
}

function markDisabledParents() {
    $('option:disabled').removeAttr('disabled');
    $("select[id*='Form_parents_']").each(function() {
        var parent = $(this);
        $("select[id*='Form_parents_']").each(function() {
            if (parent.attr('id') != $(this).attr('id')) {
                $(this).find('option[value=' + parent.find('option:selected').val() + ']').attr('disabled', 'disabled');
            }
        });
    });
}

function addHierarchyBehavior(element) {
    if (element.length) {
        element.click(function() {
            $("select[id*='Form_parents_']").off('change');
            changeHierarchyBehavior($("select[id*='Form_parents_']"));
            markDisabledParents();
            $("select[id*='Form_parents_']").each(function() {
                if ($(this).find("option:enabled").length == 1 &&
                $(this).find("option:enabled").val() == '' || $(this).find("option:enabled").length == 0) {
                    $(this).parent().remove();
                }
            });
            $("a.delete-link").off('mousedown');
            $("a.delete-link").mousedown(function() {
                markDisabledParents();
            });
        });
        markDisabledParents();
    }
}

var map;
var geocoder;
var marker;

function initialize() {
    geocoder = new google.maps.Geocoder();
    //FIXME sets default variables in constants
    var latlng = new google.maps.LatLng(40.463667, -3.74922); //Default Spain
    var mapProp = {
            center: latlng,
            zoom:10,
            sensor:true,
            mapTypeId:google.maps.MapTypeId.ROADMAP,
            streetViewControl: false,
    };
    map = new google.maps.Map(document.getElementById("googleMap") ,mapProp);
    marker = new google.maps.Marker({
        draggable: true,
    });

    marker.setMap(map);

    google.maps.event.addListener(marker, 'dragend', function(event) {
        $("[id$='Form_latitude']").val(event.latLng.lat());
        $("[id$='Form_longitude']").val(event.latLng.lng());
        updateMapFromLocation(event.latLng.lat(), event.latLng.lng(), true);
    });

    checkLocationSetted();
}

function updateMapFromAddress(address){
    geocoder.geocode( { 'address': address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            updateMapZoom(map, results[0].geometry.location);
            map.setCenter(results[0].geometry.location);
            marker.setPosition(results[0].geometry.location);

            $("[id$='Form_latitude']").val(marker.getPosition().lat());
            $("[id$='Form_longitude']").val(marker.getPosition().lng());

            checksAddressErrors();
        } else {
            addAddressError();
        }
    });
}

function updateMapFromLocation(latitude, longitude, updateAddress) {
    geocoder.geocode( { 'latLng': new google.maps.LatLng(latitude, longitude)}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            updateMapZoom(map, new google.maps.LatLng(latitude, longitude));
            map.setCenter(results[0].geometry.location);
            marker.setPosition(results[0].geometry.location);

            if(updateAddress) {
                $("[id$='Form_address']").val(results[0].formatted_address);
            }

            checksAddressErrors();
        } else {
            addAddressError();
        }
    });
}

function addAddressError() {
    if($('#address-maps-error').length == 0) {
        $("[id$='Form_address']").before('<ul class="has-error" id="address-maps-error"><li class="help-block">Address not found</li></ul>');
    }
}

function checksAddressErrors(){
    if($('#address-maps-error').length > 0) {
        $('#address-maps-error').remove()
    }
}

//FIXME: figure out a new way to update map zoom
function updateMapZoom(map, location) {
    var bounds = new google.maps.LatLngBounds();
    bounds.extend(location);
    if (bounds.getNorthEast().equals(bounds.getSouthWest())) {
        var extendPoint = new google.maps.LatLng(bounds.getNorthEast().lat() + 0.01, bounds.getNorthEast().lng() + 0.01);
        bounds.extend(extendPoint);
    }
    map.fitBounds(bounds);
}

function checkLocationSetted() {
    var latitude = $("[id$='Form_latitude']").val();
    var longitude = $("[id$='Form_longitude']").val();

    if((latitude.length > 0  && latitude != '0')&& (longitude.length > 0 && longitude != '0')) {
        updateMapFromLocation(latitude, longitude, false);
    }
    else if (latitude == '0' && longitude == '0') {
        $("[id$='Form_latitude']").val('');
        $("[id$='Form_longitude']").val('');
    }
}


$(document).ready(function() {

    google.maps.event.addDomListener(window, 'load', initialize);

    manageCollection($("button[id$='Form_addHierarchy']"));
    manageCollection($("button[id$='Form_addImg']"));
    manageCollection($("button[id$='Form_addAttach']"));
    manageCollection($("button[id$='Form_addLink']"));
    manageCollection($("button[id$='Form_addVideo']"));
    addHierarchyBehavior($("button[id$='Form_addHierarchy']"));

    $("[id$='Form_search']").click(function (event) {
        var address = $("[id$='Form_address']").val();
        if(address.length > 0) {
            updateMapFromAddress(address);
        }
    });

    $('a[rel="delete"]').click(function(e) {
        e.preventDefault();
        var resp = confirm('{{ "Are you sure you want to delete this content?" | t }}');
        if (!resp) {
            e.stopImmediatePropagation();
        }
    });

});

</script>
{% endblock %}
